# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import ast_parser as module_0
import sympy.core.sympify as module_1


def test_case_0():
    bytes_0 = b"Fo\x85Ew"
    with pytest.raises(module_1.SympifyError):
        module_0.parse_expr(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.parse_expr(none_type_0, none_type_0)


def test_case_2():
    none_type_0 = None
    transform_0 = module_0.Transform(none_type_0, none_type_0)
    assert (
        f"{type(transform_0).__module__}.{type(transform_0).__qualname__}"
        == "ast_parser.Transform"
    )
    assert transform_0.local_dict is None
    assert transform_0.global_dict is None


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    transform_0 = module_0.Transform(set_0, bool_0)
    assert (
        f"{type(transform_0).__module__}.{type(transform_0).__qualname__}"
        == "ast_parser.Transform"
    )
    assert transform_0.local_dict == {True}
    assert transform_0.global_dict is True
    transform_0.visit_Lambda(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "sympy.parsing.latex._antlr.latexparser"
    module_0.parse_expr(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "ru"
    str_1 = "K}UX.ks(D)c;cPsr"
    module_0.parse_expr(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "Nt&1#"
    module_0.parse_expr(str_0, str_0)


def test_case_7():
    str_0 = "'ru'"
    var_0 = module_0.parse_expr(str_0, str_0)
    assert var_0 == "ru"


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "Q@V"
    str_1 = '{U"X'
    module_0.parse_expr(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "E"
    str_1 = "N%&1#+"
    module_0.parse_expr(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "Q@N"
    str_1 = "h{"
    module_0.parse_expr(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "4.11"
    module_0.parse_expr(str_0, str_0)
