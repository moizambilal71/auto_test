# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import singularities as module_0
import sympy.core.expr as module_1
import sympy.functions.elementary.trigonometric as module_2
import sympy.core.sympify as module_3
import sympy.functions.elementary.hyperbolic as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.singularities(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    module_0.is_strictly_decreasing(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    module_0.is_increasing(set_0, symbol=set_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    module_0.is_monotonic(set_0, symbol=set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.is_decreasing(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_0.is_increasing(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.is_strictly_increasing(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -172
    var_0 = module_0.is_monotonic(int_0)
    assert var_0 is False
    atomic_expr_0 = module_1.AtomicExpr()
    var_1 = module_0.singularities(atomic_expr_0, atomic_expr_0, atomic_expr_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.sets.sets.EmptySet"
    )
    assert len(var_1) == 0
    module_0.monotonicity_helper(var_0, var_1, symbol=atomic_expr_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    trigonometric_function_0 = module_2.TrigonometricFunction()
    var_0 = trigonometric_function_0.rewrite()
    module_0.is_monotonic(trigonometric_function_0, symbol=trigonometric_function_0)


def test_case_9():
    int_0 = -172
    atomic_expr_0 = module_1.AtomicExpr()
    var_0 = module_0.singularities(atomic_expr_0, atomic_expr_0, atomic_expr_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.sets.sets.EmptySet"
    )
    assert len(var_0) == 0
    var_1 = module_0.is_strictly_increasing(int_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = -1326
    module_0.is_decreasing(int_0, int_0)


def test_case_11():
    int_0 = -1381
    var_0 = module_0.is_strictly_decreasing(int_0)
    assert var_0 is False


def test_case_12():
    atomic_expr_0 = module_1.AtomicExpr()
    var_0 = module_0.singularities(atomic_expr_0, atomic_expr_0, atomic_expr_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.sets.sets.EmptySet"
    )
    assert len(var_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = -172
    module_0.singularities(int_0, int_0, int_0)


def test_case_14():
    complex_0 = -3007.3098 - 3591.7j
    var_0 = module_0.is_monotonic(complex_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = -3013
    var_0 = module_0.is_strictly_decreasing(int_0)
    assert var_0 is False
    var_1 = module_0.is_increasing(int_0)
    assert var_1 is True
    module_0.singularities(var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = -170
    var_0 = module_3.sympify(int_0)
    module_0.singularities(int_0, var_0)


def test_case_17():
    str_0 = "EGV_V3%G/yiE#i"
    with pytest.raises(NotImplementedError):
        module_0.monotonicity_helper(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    int_0 = -151
    var_0 = module_0.is_monotonic(int_0)
    assert var_0 is False
    str_0 = "p3VD"
    none_type_0 = None
    module_0.is_decreasing(str_0, none_type_0)


def test_case_19():
    atomic_expr_0 = module_1.AtomicExpr()
    var_0 = module_0.singularities(atomic_expr_0, atomic_expr_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.sets.sets.EmptySet"
    )
    assert len(var_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = "L"
    var_0 = module_0.is_monotonic(str_0)
    assert var_0 is True
    str_1 = " LeP3nZ2t!"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_1: str_0}
    module_4.HyperbolicFunction(**dict_0)


def test_case_21():
    str_0 = "SWVWp/ga-aXfI"
    with pytest.raises(NotImplementedError):
        module_0.is_monotonic(str_0, str_0)
