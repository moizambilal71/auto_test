# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import paulialgebra as module_0
import sympy.core.mul as module_1
import sympy.core.expr as module_2
import sympy.core.operations as module_3


def test_case_0():
    none_type_0 = None
    var_0 = module_0.delta(none_type_0, none_type_0)
    assert var_0 == 1


def test_case_1():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    pauli_0 = module_0.delta(none_type_0, list_0)
    assert pauli_0 == 0
    var_0 = module_0.epsilon(pauli_0, list_0, list_0)
    assert var_0 == 0


def test_case_2():
    none_type_0 = None
    var_0 = module_0.epsilon(none_type_0, none_type_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.Pauli(*list_0)


def test_case_4():
    complex_0 = -2070.828 + 1985j
    var_0 = module_0.evaluate_pauli_product(complex_0)
    assert var_0 == (-2070.828 + 1985j)


@pytest.mark.xfail(strict=True)
def test_case_5():
    module_0.Pauli()


def test_case_6():
    bool_0 = True
    list_0 = [bool_0]
    pauli_0 = module_0.Pauli(*list_0)
    assert (
        f"{type(pauli_0).__module__}.{type(pauli_0).__qualname__}"
        == "paulialgebra.Pauli"
    )
    assert (
        f"{type(module_0.Pauli.i).__module__}.{type(module_0.Pauli.i).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Pauli.label).__module__}.{type(module_0.Pauli.label).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = pauli_0.__mul__(pauli_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.One"
    )


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    pauli_0 = module_0.Pauli(*list_0)
    assert (
        f"{type(pauli_0).__module__}.{type(pauli_0).__qualname__}"
        == "paulialgebra.Pauli"
    )
    assert (
        f"{type(module_0.Pauli.i).__module__}.{type(module_0.Pauli.i).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Pauli.label).__module__}.{type(module_0.Pauli.label).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = pauli_0.__mul__(pauli_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.One"
    )
    dict_0 = {var_0: bool_0}
    var_1 = pauli_0.conjugate()
    var_2 = var_1.__neg__()
    var_3 = module_0.evaluate_pauli_product(var_2)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "sympy.core.mul.Mul"
    )
    var_1.as_real_imag(**dict_0)


def test_case_8():
    bool_0 = True
    list_0 = [bool_0]
    pauli_0 = module_0.Pauli(*list_0)
    assert (
        f"{type(pauli_0).__module__}.{type(pauli_0).__qualname__}"
        == "paulialgebra.Pauli"
    )
    assert (
        f"{type(module_0.Pauli.i).__module__}.{type(module_0.Pauli.i).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Pauli.label).__module__}.{type(module_0.Pauli.label).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = pauli_0.__mul__(pauli_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.One"
    )
    var_1 = pauli_0.conjugate()
    var_2 = pauli_0.refine(var_1)
    var_3 = var_1.__neg__()
    var_4 = module_0.evaluate_pauli_product(var_3)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "sympy.core.mul.Mul"
    )
    var_5 = pauli_0.__getnewargs_ex__()


def test_case_9():
    bool_0 = True
    list_0 = [bool_0]
    pauli_0 = module_0.Pauli(*list_0)
    assert (
        f"{type(pauli_0).__module__}.{type(pauli_0).__qualname__}"
        == "paulialgebra.Pauli"
    )
    assert (
        f"{type(module_0.Pauli.i).__module__}.{type(module_0.Pauli.i).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Pauli.label).__module__}.{type(module_0.Pauli.label).__qualname__}"
        == "builtins.member_descriptor"
    )
    none_type_0 = None
    var_0 = pauli_0.__mul__(list_0)
    var_1 = pauli_0.refine(none_type_0)


def test_case_10():
    bool_0 = True
    list_0 = [bool_0]
    pauli_0 = module_0.Pauli(*list_0)
    assert (
        f"{type(pauli_0).__module__}.{type(pauli_0).__qualname__}"
        == "paulialgebra.Pauli"
    )
    assert (
        f"{type(module_0.Pauli.i).__module__}.{type(module_0.Pauli.i).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Pauli.label).__module__}.{type(module_0.Pauli.label).__qualname__}"
        == "builtins.member_descriptor"
    )
    str_0 = "3\\+|__;WHz"
    dict_0 = {str_0: bool_0}
    var_0 = pauli_0.expand(power_base=pauli_0, power_exp=pauli_0, mul=bool_0, **dict_0)
    var_1 = pauli_0.refine(var_0)
    none_type_0 = None
    var_2 = module_0.evaluate_pauli_product(none_type_0)
    var_3 = var_1.__rmul__(var_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "sympy.core.numbers.One"
    )
    mul_0 = module_1.Mul()
    var_4 = module_0.delta(var_3, none_type_0)
    assert var_4 == 0


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    list_0 = [bool_0]
    pauli_0 = module_0.Pauli(*list_0)
    assert (
        f"{type(pauli_0).__module__}.{type(pauli_0).__qualname__}"
        == "paulialgebra.Pauli"
    )
    assert (
        f"{type(module_0.Pauli.i).__module__}.{type(module_0.Pauli.i).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Pauli.label).__module__}.{type(module_0.Pauli.label).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = pauli_0.__mul__(pauli_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.One"
    )
    str_0 = "3\\+|__;WHz"
    dict_0 = {str_0: bool_0}
    var_1 = pauli_0.expand(power_base=pauli_0, power_exp=pauli_0, mul=bool_0, **dict_0)
    var_2 = pauli_0.refine(var_1)
    none_type_0 = None
    var_3 = var_2.__mul__(none_type_0)
    var_4 = var_0.extract_multiplicatively(pauli_0)
    var_3.__getnewargs_ex__()


def test_case_12():
    atomic_expr_0 = module_2.AtomicExpr()
    var_0 = atomic_expr_0.__neg__()
    var_1 = module_0.evaluate_pauli_product(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "sympy.core.mul.Mul"
    )


def test_case_13():
    atomic_expr_0 = module_2.AtomicExpr()
    var_0 = atomic_expr_0.__rmul__(atomic_expr_0)
    var_1 = module_0.evaluate_pauli_product(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "sympy.core.power.Pow"
    )


def test_case_14():
    atomic_expr_0 = module_2.AtomicExpr()
    var_0 = atomic_expr_0.__rmul__(atomic_expr_0)
    var_1 = var_0.__neg__()
    var_2 = module_0.evaluate_pauli_product(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "sympy.core.mul.Mul"
    )


@pytest.mark.xfail(strict=True)
def test_case_15():
    atomic_expr_0 = module_2.AtomicExpr()
    var_0 = atomic_expr_0.__neg__()
    var_1 = module_0.evaluate_pauli_product(atomic_expr_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.core.expr.AtomicExpr"
    )
    var_2 = var_1.__rmul__(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "sympy.core.power.Pow"
    )
    var_3 = module_0.evaluate_pauli_product(var_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "sympy.core.mul.Mul"
    )
    var_4 = var_3.__neg__()
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "sympy.core.expr.AtomicExpr"
    )
    var_5 = var_2.__add__(var_0)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "sympy.core.add.Add"
    )
    var_6 = var_3.find(var_5, var_2)
    var_7 = module_0.epsilon(var_6, var_2, var_2)
    assert var_7 == 0
    var_8 = module_0.evaluate_pauli_product(var_5)
    assert (
        f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "sympy.core.add.Add"
    )
    var_9 = var_2.as_real_imag()
    var_0.__getnewargs_ex__()


def test_case_16():
    atomic_expr_0 = module_2.AtomicExpr()
    var_0 = atomic_expr_0.__abs__()
    var_1 = module_0.evaluate_pauli_product(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.functions.elementary.complexes.Abs"
    )
    assert (
        f"{type(var_1.nargs).__module__}.{type(var_1.nargs).__qualname__}"
        == "sympy.sets.sets.FiniteSet"
    )
    assert len(var_1.nargs) == 1
    var_2 = var_1.__rmul__(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "sympy.core.power.Pow"
    )
    var_3 = module_0.evaluate_pauli_product(var_2)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "sympy.core.power.Pow"
    )
    var_4 = var_3.__neg__()
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "sympy.core.mul.Mul"
    )
    var_5 = module_0.epsilon(var_0, var_4, var_4)
    assert var_5 == 0
    var_6 = module_0.delta(var_4, var_4)
    assert var_6 == 1
    var_7 = module_0.evaluate_pauli_product(var_4)
    assert (
        f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "sympy.core.mul.Mul"
    )
    var_8 = module_0.evaluate_pauli_product(var_5)
    assert var_8 == 0
    var_9 = module_0.epsilon(var_1, var_8, var_7)
    assert var_9 == 0


def test_case_17():
    bool_0 = True
    list_0 = [bool_0]
    pauli_0 = module_0.Pauli(*list_0)
    assert (
        f"{type(pauli_0).__module__}.{type(pauli_0).__qualname__}"
        == "paulialgebra.Pauli"
    )
    assert (
        f"{type(module_0.Pauli.i).__module__}.{type(module_0.Pauli.i).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Pauli.label).__module__}.{type(module_0.Pauli.label).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = pauli_0.__mul__(pauli_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.One"
    )
    str_0 = "3\\+|__;Hz"
    dict_0 = {str_0: bool_0}
    var_1 = pauli_0.expand(power_base=pauli_0, power_exp=pauli_0, mul=bool_0, **dict_0)
    var_2 = pauli_0.refine(var_1)
    var_3 = var_1.__neg__()
    var_4 = module_0.evaluate_pauli_product(var_3)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "sympy.core.mul.Mul"
    )
    var_5 = pauli_0.__getnewargs_ex__()


def test_case_18():
    bool_0 = True
    list_0 = [bool_0]
    pauli_0 = module_0.Pauli(*list_0)
    assert (
        f"{type(pauli_0).__module__}.{type(pauli_0).__qualname__}"
        == "paulialgebra.Pauli"
    )
    assert (
        f"{type(module_0.Pauli.i).__module__}.{type(module_0.Pauli.i).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Pauli.label).__module__}.{type(module_0.Pauli.label).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = pauli_0.__mul__(pauli_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.One"
    )
    str_0 = "3\\+|__;Hz"
    var_1 = pauli_0.conjugate()
    var_2 = pauli_0.fps(pauli_0, var_0, hyper=str_0, full=var_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "sympy.series.formal.FormalPowerSeries"
    )
    assert (
        f"{type(var_2.ak_seq).__module__}.{type(var_2.ak_seq).__qualname__}"
        == "sympy.series.sequences.SeqFormula"
    )
    assert (
        f"{type(var_2.fact_seq).__module__}.{type(var_2.fact_seq).__qualname__}"
        == "sympy.series.sequences.SeqFormula"
    )
    assert (
        f"{type(var_2.bell_coeff_seq).__module__}.{type(var_2.bell_coeff_seq).__qualname__}"
        == "sympy.series.sequences.SeqFormula"
    )
    assert (
        f"{type(var_2.sign_seq).__module__}.{type(var_2.sign_seq).__qualname__}"
        == "sympy.series.sequences.SeqPer"
    )
    var_3 = var_1.__neg__()
    var_4 = module_0.evaluate_pauli_product(bool_0)
    assert var_4 is True
    var_5 = module_0.evaluate_pauli_product(var_3)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "sympy.core.mul.Mul"
    )


@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = True
    list_0 = [bool_0]
    pauli_0 = module_0.Pauli(*list_0)
    assert (
        f"{type(pauli_0).__module__}.{type(pauli_0).__qualname__}"
        == "paulialgebra.Pauli"
    )
    assert (
        f"{type(module_0.Pauli.i).__module__}.{type(module_0.Pauli.i).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Pauli.label).__module__}.{type(module_0.Pauli.label).__qualname__}"
        == "builtins.member_descriptor"
    )
    str_0 = "3\\+|__;WHz"
    dict_0 = {str_0: bool_0}
    var_0 = pauli_0.refine(bool_0)
    var_1 = pauli_0.__rpow__(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "sympy.core.power.Pow"
    )
    var_2 = module_0.epsilon(list_0, str_0, dict_0)
    assert var_2 == 0
    var_3 = module_0.evaluate_pauli_product(var_1)
    assert var_3 == 1
    var_4 = module_0.evaluate_pauli_product(list_0)
    module_3.AssocOp()


def test_case_20():
    bool_0 = True
    list_0 = [bool_0]
    pauli_0 = module_0.Pauli(*list_0)
    assert (
        f"{type(pauli_0).__module__}.{type(pauli_0).__qualname__}"
        == "paulialgebra.Pauli"
    )
    assert (
        f"{type(module_0.Pauli.i).__module__}.{type(module_0.Pauli.i).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Pauli.label).__module__}.{type(module_0.Pauli.label).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = pauli_0.__mul__(pauli_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.One"
    )
    var_1 = pauli_0.__mul__(pauli_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.core.numbers.One"
    )
    var_2 = pauli_0.conjugate()
    var_3 = pauli_0.__rtruediv__(var_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "sympy.core.power.Pow"
    )
    var_4 = module_0.evaluate_pauli_product(list_0)
    var_5 = module_0.evaluate_pauli_product(var_3)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "paulialgebra.Pauli"
    )
