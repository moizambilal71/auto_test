# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import curve as module_0
import sympy.core.function as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.Curve()


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.Curve(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xe0\x1f"
    list_0 = [bytes_0, bytes_0]
    module_0.Curve(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xc4V6\xb7I'zm3\xbc\xfdB\xd1\x9b"
    list_0 = [bytes_0, bytes_0]
    module_0.Curve(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    bytes_0 = b"\xe0\x1f"
    list_0 = [bytes_0, bool_0]
    module_0.Curve(*list_0)


def test_case_5():
    bytes_0 = b"\xe0\xb8\x1f"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    curve_0 = module_0.Curve(*list_1)
    assert f"{type(curve_0).__module__}.{type(curve_0).__qualname__}" == "curve.Curve"
    assert (
        f"{type(module_0.Curve.free_symbols).__module__}.{type(module_0.Curve.free_symbols).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.ambient_dimension).__module__}.{type(module_0.Curve.ambient_dimension).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.functions).__module__}.{type(module_0.Curve.functions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.limits).__module__}.{type(module_0.Curve.limits).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.parameter).__module__}.{type(module_0.Curve.parameter).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.length).__module__}.{type(module_0.Curve.length).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xe0\xb8\x1f"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    curve_0 = module_0.Curve(*list_1)
    assert f"{type(curve_0).__module__}.{type(curve_0).__qualname__}" == "curve.Curve"
    assert (
        f"{type(module_0.Curve.free_symbols).__module__}.{type(module_0.Curve.free_symbols).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.ambient_dimension).__module__}.{type(module_0.Curve.ambient_dimension).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.functions).__module__}.{type(module_0.Curve.functions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.limits).__module__}.{type(module_0.Curve.limits).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.parameter).__module__}.{type(module_0.Curve.parameter).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.length).__module__}.{type(module_0.Curve.length).__qualname__}"
        == "builtins.property"
    )
    curve_0.rotate()


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xe0\xb8\x1f"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    curve_0 = module_0.Curve(*list_1)
    assert f"{type(curve_0).__module__}.{type(curve_0).__qualname__}" == "curve.Curve"
    assert (
        f"{type(module_0.Curve.free_symbols).__module__}.{type(module_0.Curve.free_symbols).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.ambient_dimension).__module__}.{type(module_0.Curve.ambient_dimension).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.functions).__module__}.{type(module_0.Curve.functions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.limits).__module__}.{type(module_0.Curve.limits).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.parameter).__module__}.{type(module_0.Curve.parameter).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.length).__module__}.{type(module_0.Curve.length).__qualname__}"
        == "builtins.property"
    )
    curve_0.rotate(pt=list_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xe0\xb8\x1f"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    curve_0 = module_0.Curve(*list_1)
    assert f"{type(curve_0).__module__}.{type(curve_0).__qualname__}" == "curve.Curve"
    assert (
        f"{type(module_0.Curve.free_symbols).__module__}.{type(module_0.Curve.free_symbols).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.ambient_dimension).__module__}.{type(module_0.Curve.ambient_dimension).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.functions).__module__}.{type(module_0.Curve.functions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.limits).__module__}.{type(module_0.Curve.limits).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.parameter).__module__}.{type(module_0.Curve.parameter).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.length).__module__}.{type(module_0.Curve.length).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    curve_0.parameter_value(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\xe0\xb8\x1f"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    curve_0 = module_0.Curve(*list_1)
    assert f"{type(curve_0).__module__}.{type(curve_0).__qualname__}" == "curve.Curve"
    assert (
        f"{type(module_0.Curve.free_symbols).__module__}.{type(module_0.Curve.free_symbols).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.ambient_dimension).__module__}.{type(module_0.Curve.ambient_dimension).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.functions).__module__}.{type(module_0.Curve.functions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.limits).__module__}.{type(module_0.Curve.limits).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.parameter).__module__}.{type(module_0.Curve.parameter).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.length).__module__}.{type(module_0.Curve.length).__qualname__}"
        == "builtins.property"
    )
    curve_0.__call__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\xe0\xb8\x1f"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    curve_0 = module_0.Curve(*list_1)
    assert f"{type(curve_0).__module__}.{type(curve_0).__qualname__}" == "curve.Curve"
    assert (
        f"{type(module_0.Curve.free_symbols).__module__}.{type(module_0.Curve.free_symbols).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.ambient_dimension).__module__}.{type(module_0.Curve.ambient_dimension).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.functions).__module__}.{type(module_0.Curve.functions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.limits).__module__}.{type(module_0.Curve.limits).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.parameter).__module__}.{type(module_0.Curve.parameter).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.length).__module__}.{type(module_0.Curve.length).__qualname__}"
        == "builtins.property"
    )
    curve_0.plot_interval()


def test_case_11():
    bytes_0 = b"\xe0\xb8\x1f"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    curve_0 = module_0.Curve(*list_1)
    assert f"{type(curve_0).__module__}.{type(curve_0).__qualname__}" == "curve.Curve"
    assert (
        f"{type(module_0.Curve.free_symbols).__module__}.{type(module_0.Curve.free_symbols).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.ambient_dimension).__module__}.{type(module_0.Curve.ambient_dimension).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.functions).__module__}.{type(module_0.Curve.functions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.limits).__module__}.{type(module_0.Curve.limits).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.parameter).__module__}.{type(module_0.Curve.parameter).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.length).__module__}.{type(module_0.Curve.length).__qualname__}"
        == "builtins.property"
    )
    var_0 = curve_0.scale()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "curve.Curve"


def test_case_12():
    bytes_0 = b"\xe0\xb8\x1f"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    curve_0 = module_0.Curve(*list_1)
    assert f"{type(curve_0).__module__}.{type(curve_0).__qualname__}" == "curve.Curve"
    assert (
        f"{type(module_0.Curve.free_symbols).__module__}.{type(module_0.Curve.free_symbols).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.ambient_dimension).__module__}.{type(module_0.Curve.ambient_dimension).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.functions).__module__}.{type(module_0.Curve.functions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.limits).__module__}.{type(module_0.Curve.limits).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.parameter).__module__}.{type(module_0.Curve.parameter).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.length).__module__}.{type(module_0.Curve.length).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(ValueError):
        curve_0.arbitrary_point(list_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"\xe0\xb8\x1f"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    curve_0 = module_0.Curve(*list_1)
    assert f"{type(curve_0).__module__}.{type(curve_0).__qualname__}" == "curve.Curve"
    assert (
        f"{type(module_0.Curve.free_symbols).__module__}.{type(module_0.Curve.free_symbols).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.ambient_dimension).__module__}.{type(module_0.Curve.ambient_dimension).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.functions).__module__}.{type(module_0.Curve.functions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.limits).__module__}.{type(module_0.Curve.limits).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.parameter).__module__}.{type(module_0.Curve.parameter).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.length).__module__}.{type(module_0.Curve.length).__qualname__}"
        == "builtins.property"
    )
    curve_0.scale(pt=curve_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b"\xe0\xb8\x1f"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    curve_0 = module_0.Curve(*list_1)
    assert f"{type(curve_0).__module__}.{type(curve_0).__qualname__}" == "curve.Curve"
    assert (
        f"{type(module_0.Curve.free_symbols).__module__}.{type(module_0.Curve.free_symbols).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.ambient_dimension).__module__}.{type(module_0.Curve.ambient_dimension).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.functions).__module__}.{type(module_0.Curve.functions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.limits).__module__}.{type(module_0.Curve.limits).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.parameter).__module__}.{type(module_0.Curve.parameter).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.length).__module__}.{type(module_0.Curve.length).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    curve_0.arbitrary_point(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b"\xe0\xb8\x1f"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    curve_0 = module_0.Curve(*list_1)
    assert f"{type(curve_0).__module__}.{type(curve_0).__qualname__}" == "curve.Curve"
    assert (
        f"{type(module_0.Curve.free_symbols).__module__}.{type(module_0.Curve.free_symbols).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.ambient_dimension).__module__}.{type(module_0.Curve.ambient_dimension).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.functions).__module__}.{type(module_0.Curve.functions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.limits).__module__}.{type(module_0.Curve.limits).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.parameter).__module__}.{type(module_0.Curve.parameter).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.length).__module__}.{type(module_0.Curve.length).__qualname__}"
        == "builtins.property"
    )
    curve_0.__call__(curve_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b"\xe0\xb8\x1f"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    curve_0 = module_0.Curve(*list_1)
    assert f"{type(curve_0).__module__}.{type(curve_0).__qualname__}" == "curve.Curve"
    assert (
        f"{type(module_0.Curve.free_symbols).__module__}.{type(module_0.Curve.free_symbols).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.ambient_dimension).__module__}.{type(module_0.Curve.ambient_dimension).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.functions).__module__}.{type(module_0.Curve.functions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.limits).__module__}.{type(module_0.Curve.limits).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.parameter).__module__}.{type(module_0.Curve.parameter).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.length).__module__}.{type(module_0.Curve.length).__qualname__}"
        == "builtins.property"
    )
    str_0 = "QMjsqC)XZyZcO?o"
    var_0 = curve_0.scale()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "curve.Curve"
    dict_0 = {}
    dict_1 = {str_0: list_0, str_0: list_0, str_0: dict_0, str_0: curve_0}
    module_1.diff(curve_0, **dict_1)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bytes_0 = b"\xe0\xb8\x1f"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    curve_0 = module_0.Curve(*list_1)
    assert f"{type(curve_0).__module__}.{type(curve_0).__qualname__}" == "curve.Curve"
    assert (
        f"{type(module_0.Curve.free_symbols).__module__}.{type(module_0.Curve.free_symbols).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.ambient_dimension).__module__}.{type(module_0.Curve.ambient_dimension).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.functions).__module__}.{type(module_0.Curve.functions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.limits).__module__}.{type(module_0.Curve.limits).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.parameter).__module__}.{type(module_0.Curve.parameter).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Curve.length).__module__}.{type(module_0.Curve.length).__qualname__}"
        == "builtins.property"
    )
    curve_0.evalf(chop=curve_0, verbose=bytes_0)
