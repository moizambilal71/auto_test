# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import inference as module_0
import sympy.logic.boolalg as module_1


def test_case_0():
    str_0 = " o#J}_\nj~"
    var_0 = module_0.entails(str_0)
    assert var_0 is False
    int_0 = 2885
    var_1 = module_0.entails(int_0, var_0)
    assert var_1 is True
    var_2 = module_1.to_cnf(int_0, int_0, var_1)
    var_3 = module_0.literal_symbol(var_1)
    assert var_3 is True
    set_0 = {var_0, var_3, var_2}
    var_4 = module_0.pl_true(str_0, deep=set_0)
    with pytest.raises(NotImplementedError):
        module_0.satisfiable(var_1, str_0, minimal=var_3)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "r(b"
    module_0.literal_symbol(str_0)


def test_case_2():
    float_0 = -1322.1
    with pytest.raises(ValueError):
        module_0.satisfiable(float_0, float_0, minimal=float_0, use_lra_theory=float_0)


def test_case_3():
    int_0 = 2317
    var_0 = module_0.valid(int_0)
    assert var_0 is True


def test_case_4():
    str_0 = " o#J}!_\njm1~"
    var_0 = module_0.pl_true(str_0)
    prop_k_b_0 = module_0.PropKB()
    assert prop_k_b_0.clauses_ == {*()}
    var_1 = module_0.entails(str_0)
    assert var_1 is False
    var_2 = module_0.entails(var_1)
    assert var_2 is False
    var_3 = module_0.pl_true(var_2, deep=var_2)
    assert var_3 is False


def test_case_5():
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.pl_true(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    k_b_0 = module_0.KB()
    assert f"{type(k_b_0).__module__}.{type(k_b_0).__qualname__}" == "inference.KB"
    assert k_b_0.clauses_ == {*()}
    assert (
        f"{type(module_0.KB.clauses).__module__}.{type(module_0.KB.clauses).__qualname__}"
        == "builtins.property"
    )
    module_0.entails(k_b_0)


def test_case_7():
    str_0 = "o"
    prop_k_b_0 = module_0.PropKB(str_0)
    assert (
        f"{type(prop_k_b_0).__module__}.{type(prop_k_b_0).__qualname__}"
        == "inference.PropKB"
    )
    assert (
        f"{type(prop_k_b_0.clauses_).__module__}.{type(prop_k_b_0.clauses_).__qualname__}"
        == "builtins.set"
    )
    assert len(prop_k_b_0.clauses_) == 1
    prop_k_b_1 = module_0.PropKB()
    assert prop_k_b_1.clauses_ == {*()}
    var_0 = module_0.pl_true(str_0, deep=prop_k_b_1)


def test_case_8():
    prop_k_b_0 = module_0.PropKB()
    assert prop_k_b_0.clauses_ == {*()}


def test_case_9():
    k_b_0 = module_0.KB()
    assert f"{type(k_b_0).__module__}.{type(k_b_0).__qualname__}" == "inference.KB"
    assert k_b_0.clauses_ == {*()}
    assert (
        f"{type(module_0.KB.clauses).__module__}.{type(module_0.KB.clauses).__qualname__}"
        == "builtins.property"
    )
    prop_k_b_0 = module_0.PropKB()
    none_type_0 = None
    with pytest.raises(NotImplementedError):
        k_b_0.tell(none_type_0)


def test_case_10():
    k_b_0 = module_0.KB()
    assert f"{type(k_b_0).__module__}.{type(k_b_0).__qualname__}" == "inference.KB"
    assert k_b_0.clauses_ == {*()}
    assert (
        f"{type(module_0.KB.clauses).__module__}.{type(module_0.KB.clauses).__qualname__}"
        == "builtins.property"
    )
    k_b_1 = module_0.KB()
    none_type_0 = None
    with pytest.raises(NotImplementedError):
        k_b_0.retract(none_type_0)


def test_case_11():
    str_0 = "o"
    prop_k_b_0 = module_0.PropKB(str_0)
    assert (
        f"{type(prop_k_b_0).__module__}.{type(prop_k_b_0).__qualname__}"
        == "inference.PropKB"
    )
    assert (
        f"{type(prop_k_b_0.clauses_).__module__}.{type(prop_k_b_0.clauses_).__qualname__}"
        == "builtins.set"
    )
    assert len(prop_k_b_0.clauses_) == 1
    var_0 = prop_k_b_0.ask(str_0)
    assert var_0 is True
    var_1 = prop_k_b_0.retract(str_0)
    assert prop_k_b_0.clauses_ == {*()}
    with pytest.raises(ValueError):
        module_0.satisfiable(var_1, str_0, var_1, use_lra_theory=str_0)


def test_case_12():
    str_0 = " o#J}!_\njm1~"
    var_0 = module_0.pl_true(str_0)
    set_0 = {var_0, var_0, var_0}
    with pytest.raises(ValueError):
        module_0.satisfiable(str_0, minimal=set_0, use_lra_theory=set_0)


def test_case_13():
    str_0 = " o#J}!_\njm1~"
    var_0 = module_0.pl_true(str_0)
    prop_k_b_0 = module_0.PropKB()
    assert prop_k_b_0.clauses_ == {*()}
    var_1 = module_1.to_cnf(var_0, var_0, var_0)
    with pytest.raises(NotImplementedError):
        module_0.satisfiable(prop_k_b_0, str_0, minimal=str_0)


def test_case_14():
    str_0 = "pFy\t"
    var_0 = module_0.pl_true(str_0, deep=str_0)


def test_case_15():
    prop_k_b_0 = module_0.PropKB()
    assert prop_k_b_0.clauses_ == {*()}
    boolean_function_0 = module_1.BooleanFunction()
    var_0 = module_0.pl_true(boolean_function_0)


def test_case_16():
    k_b_0 = module_0.KB()
    assert f"{type(k_b_0).__module__}.{type(k_b_0).__qualname__}" == "inference.KB"
    assert k_b_0.clauses_ == {*()}
    assert (
        f"{type(module_0.KB.clauses).__module__}.{type(module_0.KB.clauses).__qualname__}"
        == "builtins.property"
    )
    prop_k_b_0 = module_0.PropKB()
    with pytest.raises(NotImplementedError):
        k_b_0.ask(prop_k_b_0)


def test_case_17():
    prop_k_b_0 = module_0.PropKB()
    assert prop_k_b_0.clauses_ == {*()}
    int_0 = 4
    var_0 = prop_k_b_0.retract(int_0)
    with pytest.raises(ValueError):
        module_0.pl_true(int_0)


def test_case_18():
    prop_k_b_0 = module_0.PropKB()
    assert prop_k_b_0.clauses_ == {*()}
    int_0 = 0
    var_0 = module_0.entails(int_0, int_0)
    assert var_0 is False
    int_1 = 2
    var_1 = module_0.literal_symbol(var_0)
    assert var_1 is False
    set_0 = {int_0, int_0, var_1}
    var_2 = module_0.pl_true(var_0, deep=set_0)
    with pytest.raises(ValueError):
        module_0.pl_true(int_1, deep=var_1)


def test_case_19():
    int_0 = 0
    int_1 = 4
    var_0 = module_1.to_cnf(int_0, int_0, int_1)
    var_1 = var_0.__xor__(var_0)
    with pytest.raises(ValueError):
        module_0.literal_symbol(var_1)


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = "minisat22"
    var_0 = module_0.satisfiable(str_0, str_0, str_0, str_0)
    bytes_0 = b"\x1a\xf9"
    bytes_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = " o#J}_\nj~"
    var_0 = module_0.valid(str_0)
    assert var_0 is False
    var_1 = var_0.__str__()
    assert var_1 == "False"
    int_0 = 0
    var_2 = module_0.entails(int_0, var_0)
    assert var_2 is False
    var_3 = module_1.to_cnf(int_0, int_0, var_2)
    var_4 = module_0.literal_symbol(var_2)
    assert var_4 is False
    set_0 = {var_0, int_0, var_3}
    var_5 = module_0.pl_true(str_0, deep=set_0)
    var_6 = var_3.count(var_2)
    var_7 = module_0.pl_true(var_2)
    module_0.pl_true(var_1, deep=var_5)


def test_case_22():
    str_0 = "~a"
    var_0 = module_0.pl_true(str_0, deep=str_0)


def test_case_23():
    str_0 = " o#J}_\nj~"
    prop_k_b_0 = module_0.PropKB()
    assert prop_k_b_0.clauses_ == {*()}
    int_0 = -657
    var_0 = module_1.to_cnf(str_0, int_0)
    int_1 = 4
    var_1 = module_0.literal_symbol(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.core.symbol.Symbol"
    )
    var_2 = module_0.pl_true(str_0, deep=var_1)
    with pytest.raises(ValueError):
        module_0.satisfiable(int_1, use_lra_theory=int_1)


def test_case_24():
    str_0 = "~o"
    int_0 = -655
    var_0 = module_1.to_cnf(str_0, int_0)
    var_1 = module_0.literal_symbol(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.core.symbol.Symbol"
    )
    with pytest.raises(ValueError):
        module_0.satisfiable(int_0, str_0, int_0, use_lra_theory=int_0)
