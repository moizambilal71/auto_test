# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import baseclasses as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "$?4["
    module_0.CompositeMorphism(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.CompositeMorphism()


@pytest.mark.xfail(strict=True)
def test_case_2():
    diagram_0 = module_0.Diagram()
    assert (
        f"{type(diagram_0).__module__}.{type(diagram_0).__qualname__}"
        == "baseclasses.Diagram"
    )
    assert (
        f"{type(module_0.Diagram.premises).__module__}.{type(module_0.Diagram.premises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.conclusions).__module__}.{type(module_0.Diagram.conclusions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.objects).__module__}.{type(module_0.Diagram.objects).__qualname__}"
        == "builtins.property"
    )
    diagram_0.__new__(diagram_0, diagram_0, diagram_0)


def test_case_3():
    diagram_0 = module_0.Diagram()
    assert (
        f"{type(diagram_0).__module__}.{type(diagram_0).__qualname__}"
        == "baseclasses.Diagram"
    )
    assert (
        f"{type(module_0.Diagram.premises).__module__}.{type(module_0.Diagram.premises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.conclusions).__module__}.{type(module_0.Diagram.conclusions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.objects).__module__}.{type(module_0.Diagram.objects).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_4():
    module_0.Category()


def test_case_5():
    diagram_0 = module_0.Diagram()
    assert (
        f"{type(diagram_0).__module__}.{type(diagram_0).__qualname__}"
        == "baseclasses.Diagram"
    )
    assert (
        f"{type(module_0.Diagram.premises).__module__}.{type(module_0.Diagram.premises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.conclusions).__module__}.{type(module_0.Diagram.conclusions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.objects).__module__}.{type(module_0.Diagram.objects).__qualname__}"
        == "builtins.property"
    )
    var_0 = diagram_0.copy()


def test_case_6():
    diagram_0 = module_0.Diagram()
    assert (
        f"{type(diagram_0).__module__}.{type(diagram_0).__qualname__}"
        == "baseclasses.Diagram"
    )
    assert (
        f"{type(module_0.Diagram.premises).__module__}.{type(module_0.Diagram.premises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.conclusions).__module__}.{type(module_0.Diagram.conclusions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.objects).__module__}.{type(module_0.Diagram.objects).__qualname__}"
        == "builtins.property"
    )
    var_0 = diagram_0.is_subdiagram(diagram_0)
    assert var_0 is True


def test_case_7():
    diagram_0 = module_0.Diagram()
    assert (
        f"{type(diagram_0).__module__}.{type(diagram_0).__qualname__}"
        == "baseclasses.Diagram"
    )
    assert (
        f"{type(module_0.Diagram.premises).__module__}.{type(module_0.Diagram.premises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.conclusions).__module__}.{type(module_0.Diagram.conclusions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.objects).__module__}.{type(module_0.Diagram.objects).__qualname__}"
        == "builtins.property"
    )
    var_0 = diagram_0.hom(diagram_0, diagram_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    class_0 = module_0.Class(*list_0)
    module_0.Category(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    diagram_0 = module_0.Diagram()
    assert (
        f"{type(diagram_0).__module__}.{type(diagram_0).__qualname__}"
        == "baseclasses.Diagram"
    )
    assert (
        f"{type(module_0.Diagram.premises).__module__}.{type(module_0.Diagram.premises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.conclusions).__module__}.{type(module_0.Diagram.conclusions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.objects).__module__}.{type(module_0.Diagram.objects).__qualname__}"
        == "builtins.property"
    )
    list_0 = [diagram_0]
    list_1 = [list_0, diagram_0, diagram_0, diagram_0]
    diagram_0.__new__(diagram_0, *list_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x1a"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.Category(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.NamedMorphism(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    diagram_0 = module_0.Diagram()
    assert (
        f"{type(diagram_0).__module__}.{type(diagram_0).__qualname__}"
        == "baseclasses.Diagram"
    )
    assert (
        f"{type(module_0.Diagram.premises).__module__}.{type(module_0.Diagram.premises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.conclusions).__module__}.{type(module_0.Diagram.conclusions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.objects).__module__}.{type(module_0.Diagram.objects).__qualname__}"
        == "builtins.property"
    )
    str_0 = "Sn+,rujSs5\\(wa+\x0cs"
    str_1 = "R=BlJP"
    dict_0 = {str_0: diagram_0, str_0: diagram_0, str_1: diagram_0}
    list_0 = [diagram_0, dict_0]
    module_0.Morphism(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    diagram_0 = module_0.Diagram()
    assert (
        f"{type(diagram_0).__module__}.{type(diagram_0).__qualname__}"
        == "baseclasses.Diagram"
    )
    assert (
        f"{type(module_0.Diagram.premises).__module__}.{type(module_0.Diagram.premises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.conclusions).__module__}.{type(module_0.Diagram.conclusions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.objects).__module__}.{type(module_0.Diagram.objects).__qualname__}"
        == "builtins.property"
    )
    list_0 = []
    list_1 = [list_0, diagram_0, diagram_0, diagram_0]
    diagram_0.__new__(diagram_0, *list_1)


@pytest.mark.xfail(strict=True)
def test_case_14():
    diagram_0 = module_0.Diagram()
    assert (
        f"{type(diagram_0).__module__}.{type(diagram_0).__qualname__}"
        == "baseclasses.Diagram"
    )
    assert (
        f"{type(module_0.Diagram.premises).__module__}.{type(module_0.Diagram.premises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.conclusions).__module__}.{type(module_0.Diagram.conclusions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.objects).__module__}.{type(module_0.Diagram.objects).__qualname__}"
        == "builtins.property"
    )
    str_0 = ":n40"
    dict_0 = {str_0: diagram_0, str_0: diagram_0}
    var_0 = diagram_0.doit(**dict_0)
    var_0.__new__(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "Zi+"
    named_morphism_0 = module_0.NamedMorphism(*str_0)
    assert (
        f"{type(named_morphism_0).__module__}.{type(named_morphism_0).__qualname__}"
        == "baseclasses.NamedMorphism"
    )
    assert (
        f"{type(module_0.NamedMorphism.name).__module__}.{type(module_0.NamedMorphism.name).__qualname__}"
        == "builtins.property"
    )
    module_0.CompositeMorphism(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    diagram_0 = module_0.Diagram()
    assert (
        f"{type(diagram_0).__module__}.{type(diagram_0).__qualname__}"
        == "baseclasses.Diagram"
    )
    assert (
        f"{type(module_0.Diagram.premises).__module__}.{type(module_0.Diagram.premises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.conclusions).__module__}.{type(module_0.Diagram.conclusions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.objects).__module__}.{type(module_0.Diagram.objects).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    var_0 = diagram_0.rcall(*list_0)
    var_0.__new__(list_0, var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    diagram_0 = module_0.Diagram()
    assert (
        f"{type(diagram_0).__module__}.{type(diagram_0).__qualname__}"
        == "baseclasses.Diagram"
    )
    assert (
        f"{type(module_0.Diagram.premises).__module__}.{type(module_0.Diagram.premises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.conclusions).__module__}.{type(module_0.Diagram.conclusions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.objects).__module__}.{type(module_0.Diagram.objects).__qualname__}"
        == "builtins.property"
    )
    list_0 = []
    list_1 = [diagram_0, list_0, diagram_0, diagram_0, diagram_0]
    diagram_0.__new__(diagram_0, *list_1)


@pytest.mark.xfail(strict=True)
def test_case_18():
    diagram_0 = module_0.Diagram()
    assert (
        f"{type(diagram_0).__module__}.{type(diagram_0).__qualname__}"
        == "baseclasses.Diagram"
    )
    assert (
        f"{type(module_0.Diagram.premises).__module__}.{type(module_0.Diagram.premises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.conclusions).__module__}.{type(module_0.Diagram.conclusions).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Diagram.objects).__module__}.{type(module_0.Diagram.objects).__qualname__}"
        == "builtins.property"
    )
    str_0 = "f"
    dict_0 = {str_0: diagram_0, str_0: diagram_0}
    var_0 = diagram_0.doit(**dict_0)
    var_0.__new__(str_0, var_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    float_0 = -161.7
    list_0 = [float_0]
    identity_morphism_0 = module_0.IdentityMorphism(*list_0)
    assert (
        f"{type(identity_morphism_0).__module__}.{type(identity_morphism_0).__qualname__}"
        == "baseclasses.IdentityMorphism"
    )
    assert (
        f"{type(module_0.IdentityMorphism.codomain).__module__}.{type(module_0.IdentityMorphism.codomain).__qualname__}"
        == "builtins.property"
    )
    var_0 = identity_morphism_0.__mul__(identity_morphism_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "baseclasses.IdentityMorphism"
    )
    var_0.extract_branch_factor()


def test_case_20():
    int_0 = -3077
    str_0 = "Dvt`9RCO-w`ZG!a"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    category_0 = module_0.Category(*dict_0)
    assert (
        f"{type(category_0).__module__}.{type(category_0).__qualname__}"
        == "baseclasses.Category"
    )
    assert (
        f"{type(module_0.Category.name).__module__}.{type(module_0.Category.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Category.objects).__module__}.{type(module_0.Category.objects).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Category.commutative_diagrams).__module__}.{type(module_0.Category.commutative_diagrams).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(NotImplementedError):
        category_0.hom(int_0, category_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = "Dvt`9RCO-w`ZG!a"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    category_0 = module_0.Category(*dict_0)
    assert (
        f"{type(category_0).__module__}.{type(category_0).__qualname__}"
        == "baseclasses.Category"
    )
    assert (
        f"{type(module_0.Category.name).__module__}.{type(module_0.Category.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Category.objects).__module__}.{type(module_0.Category.objects).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Category.commutative_diagrams).__module__}.{type(module_0.Category.commutative_diagrams).__qualname__}"
        == "builtins.property"
    )
    var_0 = category_0.rcall()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "baseclasses.Category"
    )
    var_0.items()


def test_case_22():
    str_0 = "Dvt`9RCO-w`ZG!a"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    category_0 = module_0.Category(*dict_0)
    assert (
        f"{type(category_0).__module__}.{type(category_0).__qualname__}"
        == "baseclasses.Category"
    )
    assert (
        f"{type(module_0.Category.name).__module__}.{type(module_0.Category.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Category.objects).__module__}.{type(module_0.Category.objects).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Category.commutative_diagrams).__module__}.{type(module_0.Category.commutative_diagrams).__qualname__}"
        == "builtins.property"
    )
    var_0 = category_0.__str__()
    assert var_0 == 'Category("Dvt`9RCO-w`ZG!a")'
    with pytest.raises(TypeError):
        var_0.__new__(str_0)
