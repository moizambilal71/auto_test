# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import matrices as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    var_0 = module_0.mgamma(bool_0, bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.matrices.dense.MutableDenseMatrix"
    )
    assert len(var_0) == 16
    var_1 = module_0.msigma(bool_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.matrices.dense.MutableDenseMatrix"
    )
    assert len(var_1) == 4
    module_0.mdft(var_0)


def test_case_1():
    none_type_0 = None
    with pytest.raises(IndexError):
        module_0.msigma(none_type_0)


def test_case_2():
    list_0 = []
    none_type_0 = None
    with pytest.raises(IndexError):
        module_0.mgamma(list_0, none_type_0)


def test_case_3():
    bool_0 = True
    var_0 = module_0.mgamma(bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.matrices.dense.MutableDenseMatrix"
    )
    assert len(var_0) == 16


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.pat_matrix(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    list_0 = []
    module_0.mdft(list_0)


def test_case_6():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.mgamma(bool_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.matrices.dense.MutableDenseMatrix"
    )
    assert len(var_0) == 16
    none_type_1 = None
    with pytest.raises(IndexError):
        module_0.msigma(none_type_1)


def test_case_7():
    bool_0 = True
    var_0 = module_0.mgamma(bool_0, bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.matrices.dense.MutableDenseMatrix"
    )
    assert len(var_0) == 16
    var_1 = var_0.norm()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.core.numbers.Integer"
    )
    var_2 = module_0.msigma(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "sympy.matrices.dense.MutableDenseMatrix"
    )
    assert len(var_2) == 4
    with pytest.raises(IndexError):
        module_0.msigma(var_2)


def test_case_8():
    bool_0 = True
    bool_1 = False
    var_0 = module_0.mgamma(bool_1, bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.matrices.dense.MutableDenseMatrix"
    )
    assert len(var_0) == 16
    bool_2 = False
    with pytest.raises(IndexError):
        module_0.msigma(bool_2)
