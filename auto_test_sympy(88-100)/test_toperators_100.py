# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import toperators as module_0


def test_case_0():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    partial_derivative_0 = module_0.PartialDerivative(*list_0)
    assert (
        f"{type(partial_derivative_0).__module__}.{type(partial_derivative_0).__qualname__}"
        == "toperators.PartialDerivative"
    )
    assert (
        f"{type(module_0.PartialDerivative.coeff).__module__}.{type(module_0.PartialDerivative.coeff).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.nocoeff).__module__}.{type(module_0.PartialDerivative.nocoeff).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.expr).__module__}.{type(module_0.PartialDerivative.expr).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.variables).__module__}.{type(module_0.PartialDerivative.variables).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.PartialDerivative()


def test_case_2():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    partial_derivative_0 = module_0.PartialDerivative(*list_0, **dict_0)
    assert (
        f"{type(partial_derivative_0).__module__}.{type(partial_derivative_0).__qualname__}"
        == "toperators.PartialDerivative"
    )
    assert (
        f"{type(module_0.PartialDerivative.coeff).__module__}.{type(module_0.PartialDerivative.coeff).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.nocoeff).__module__}.{type(module_0.PartialDerivative.nocoeff).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.expr).__module__}.{type(module_0.PartialDerivative.expr).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.variables).__module__}.{type(module_0.PartialDerivative.variables).__qualname__}"
        == "builtins.property"
    )
    var_0 = partial_derivative_0.__rmul__(partial_derivative_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.tensor.TensMul"
    )


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0, dict_0, dict_0, dict_0, dict_0]
    partial_derivative_0 = module_0.PartialDerivative(*list_0, **dict_0)
    assert (
        f"{type(partial_derivative_0).__module__}.{type(partial_derivative_0).__qualname__}"
        == "toperators.PartialDerivative"
    )
    assert (
        f"{type(module_0.PartialDerivative.coeff).__module__}.{type(module_0.PartialDerivative.coeff).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.nocoeff).__module__}.{type(module_0.PartialDerivative.nocoeff).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.expr).__module__}.{type(module_0.PartialDerivative.expr).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.variables).__module__}.{type(module_0.PartialDerivative.variables).__qualname__}"
        == "builtins.property"
    )
    var_0 = partial_derivative_0.__radd__(partial_derivative_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.tensor.TensMul"
    )
    partial_derivative_0.__new__(var_0, partial_derivative_0)


def test_case_4():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    partial_derivative_0 = module_0.PartialDerivative(*list_0)
    assert (
        f"{type(partial_derivative_0).__module__}.{type(partial_derivative_0).__qualname__}"
        == "toperators.PartialDerivative"
    )
    assert (
        f"{type(module_0.PartialDerivative.coeff).__module__}.{type(module_0.PartialDerivative.coeff).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.nocoeff).__module__}.{type(module_0.PartialDerivative.nocoeff).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.expr).__module__}.{type(module_0.PartialDerivative.expr).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.variables).__module__}.{type(module_0.PartialDerivative.variables).__qualname__}"
        == "builtins.property"
    )
    var_0 = partial_derivative_0.get_free_indices()


def test_case_5():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    partial_derivative_0 = module_0.PartialDerivative(*list_0, **dict_0)
    assert (
        f"{type(partial_derivative_0).__module__}.{type(partial_derivative_0).__qualname__}"
        == "toperators.PartialDerivative"
    )
    assert (
        f"{type(module_0.PartialDerivative.coeff).__module__}.{type(module_0.PartialDerivative.coeff).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.nocoeff).__module__}.{type(module_0.PartialDerivative.nocoeff).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.expr).__module__}.{type(module_0.PartialDerivative.expr).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.PartialDerivative.variables).__module__}.{type(module_0.PartialDerivative.variables).__qualname__}"
        == "builtins.property"
    )
    var_0 = partial_derivative_0.__radd__(partial_derivative_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.tensor.TensMul"
    )
