# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import arrayexpr_derivatives as module_0
import sympy.tensor.array.expressions.array_expressions as module_1
import sympy.matrices.expressions.matexpr as module_2
import sympy.matrices.expressions.transpose as module_3


def test_case_0():
    bool_0 = False
    with pytest.raises(NotImplementedError):
        module_0.array_derive(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.matrix_derive(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    array_tensor_product_0 = module_1.ArrayTensorProduct()
    var_0 = module_0.matrix_derive(array_tensor_product_0, array_tensor_product_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.Zero"
    )
    module_0.matrix_derive(var_0, var_0)


def test_case_3():
    array_tensor_product_0 = module_1.ArrayTensorProduct()
    var_0 = module_0.matrix_derive(array_tensor_product_0, array_tensor_product_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.Zero"
    )


def test_case_4():
    array_tensor_product_0 = module_1.ArrayTensorProduct()
    list_0 = [array_tensor_product_0, array_tensor_product_0]
    array_tensor_product_1 = module_1.ArrayTensorProduct(*list_0)
    var_0 = module_0.matrix_derive(array_tensor_product_1, list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.Zero"
    )


@pytest.mark.xfail(strict=True)
def test_case_5():
    array_tensor_product_0 = module_1.ArrayTensorProduct()
    list_0 = [array_tensor_product_0, array_tensor_product_0]
    array_tensor_product_1 = module_1.ArrayTensorProduct(*list_0)
    var_0 = module_2.MatrixExpr()
    module_0.matrix_derive(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    array_tensor_product_0 = module_1.ArrayTensorProduct()
    list_0 = [array_tensor_product_0, array_tensor_product_0]
    array_tensor_product_1 = module_1.ArrayTensorProduct(*list_0)
    none_type_0 = None
    var_0 = module_0.matrix_derive(array_tensor_product_1, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.Zero"
    )
    transpose_0 = module_3.Transpose()
    module_0.array_derive(transpose_0, none_type_0)
