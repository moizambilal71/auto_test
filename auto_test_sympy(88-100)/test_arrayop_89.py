# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import arrayop as module_0


def test_case_0():
    tuple_0 = ()
    var_0 = module_0.tensorcontraction(tuple_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_0) == 0


def test_case_1():
    var_0 = module_0.tensorproduct()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.One"
    )


def test_case_2():
    bytes_0 = b"z\x14\xa2"
    var_0 = module_0.tensorproduct(*bytes_0)
    assert var_0 == 395280


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"w\xfaR\xe2\xebM\x14\x13yh\xde'\xe4]_"
    module_0.tensorcontraction(bytes_0, *bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x98\x90\x86\x06\xa0\x96c\x00"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.tensordiagonal(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    module_0.tensordiagonal(bool_0)


def test_case_6():
    tuple_0 = ()
    var_0 = module_0.derive_by_array(tuple_0, tuple_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_0) == 0


def test_case_7():
    int_0 = -4263
    with pytest.raises(ValueError):
        module_0.derive_by_array(int_0, int_0)


def test_case_8():
    tuple_0 = ()
    bool_0 = True
    var_0 = module_0.derive_by_array(bool_0, tuple_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_9():
    complex_0 = 1692.34 - 2591.1349j
    module_0.permutedims(complex_0, complex_0)


def test_case_10():
    bool_0 = False
    with pytest.raises(NotImplementedError):
        module_0.Flatten(bool_0)


def test_case_11():
    str_0 = "_IndPos(%i, %i)"
    flatten_0 = module_0.Flatten(str_0)
    assert (
        f"{type(flatten_0).__module__}.{type(flatten_0).__qualname__}"
        == "arrayop.Flatten"
    )
    var_0 = flatten_0.__str__()
    assert var_0 == "Flatten(_IndPos(%i, %i))"
    var_1 = flatten_0.next()
    assert var_1 == "_"
    var_2 = var_1.__iter__()


def test_case_12():
    tuple_0 = ()
    list_0 = [tuple_0]
    var_0 = module_0.tensorproduct(*list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_0) == 0
    int_0 = -428
    var_1 = module_0.permutedims(int_0, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_1) == 1
    var_2 = module_0.tensorcontraction(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "sympy.core.numbers.Integer"
    )


def test_case_13():
    bytes_0 = b"z\xd9\xd6\xcd\xa2\xb1"
    list_0 = [bytes_0]
    var_0 = module_0.tensorcontraction(list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_0) == 6
    with pytest.raises(ValueError):
        module_0.derive_by_array(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    var_0 = module_0.derive_by_array(dict_0, list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_0) == 0
    module_0.derive_by_array(list_0, none_type_0)


def test_case_15():
    bytes_0 = b"z\xd9\xd6\xcd\xa2\xb1"
    list_0 = [bytes_0]
    with pytest.raises(ValueError):
        module_0.derive_by_array(list_0, list_0)


def test_case_16():
    bytes_0 = b"\x13\x82\xf96\x8f\xf7\xe0Y\xb6\x0e\x94"
    with pytest.raises(ValueError):
        module_0.derive_by_array(bytes_0, bytes_0)


def test_case_17():
    var_0 = module_0.tensorproduct()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.One"
    )
    none_type_0 = None
    list_0 = [none_type_0]
    flatten_0 = module_0.Flatten(list_0)
    assert (
        f"{type(flatten_0).__module__}.{type(flatten_0).__qualname__}"
        == "arrayop.Flatten"
    )
    with pytest.raises(ValueError):
        module_0.derive_by_array(list_0, var_0)


def test_case_18():
    tuple_0 = ()
    bool_0 = True
    var_0 = module_0.permutedims(bool_0, tuple_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_0) == 1


def test_case_19():
    str_0 = "_IndPos(%i, %i)"
    flatten_0 = module_0.Flatten(str_0)
    assert (
        f"{type(flatten_0).__module__}.{type(flatten_0).__qualname__}"
        == "arrayop.Flatten"
    )
    var_0 = flatten_0.next()
    assert var_0 == "_"


def test_case_20():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0, tuple_0, tuple_0, tuple_0]
    var_0 = module_0.tensorproduct(*list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_0) == 0


def test_case_21():
    tuple_0 = ()
    var_0 = module_0.tensordiagonal(tuple_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_22():
    var_0 = module_0.tensorproduct()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.One"
    )
    none_type_0 = None
    list_0 = [var_0]
    var_1 = module_0.tensorcontraction(list_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_1) == 1
    var_2 = var_1.__str__()
    assert var_2 == "[1]"
    var_3 = var_2.__eq__(none_type_0)
    module_0.tensordiagonal(var_0, *list_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bytes_0 = b"\x98\x90\x86\x06\xa0\x96c\x00"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.tensorcontraction(bytes_0, *list_0)


def test_case_24():
    tuple_0 = ()
    bool_0 = False
    var_0 = module_0.derive_by_array(bool_0, tuple_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_0) == 0
    with pytest.raises(ValueError):
        module_0.permutedims(var_0, var_0)


def test_case_25():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    with pytest.raises(ValueError):
        module_0.tensordiagonal(tuple_0, *list_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    tuple_0 = ()
    bytes_0 = b"Xa\xe8UasW\xfd\xdb\xcc"
    list_0 = [tuple_0, tuple_0, bytes_0, tuple_0]
    module_0.tensorproduct(*list_0)


def test_case_27():
    tuple_0 = ()
    int_0 = -428
    var_0 = module_0.permutedims(int_0, tuple_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_0) == 1
    var_1 = module_0.tensorcontraction(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.core.numbers.Integer"
    )


@pytest.mark.xfail(strict=True)
def test_case_28():
    tuple_0 = ()
    flatten_0 = module_0.Flatten(tuple_0)
    assert (
        f"{type(flatten_0).__module__}.{type(flatten_0).__qualname__}"
        == "arrayop.Flatten"
    )
    list_0 = [tuple_0, tuple_0]
    var_0 = module_0.tensorproduct(*list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_0) == 0
    int_0 = -385
    var_1 = module_0.permutedims(int_0, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_1) == 1
    var_2 = module_0.tensorcontraction(list_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_2) == 0
    var_3 = module_0.derive_by_array(var_1, var_2)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_3) == 0
    var_4 = module_0.derive_by_array(var_1, tuple_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_4) == 0
    list_1 = [var_0]
    var_5 = var_4.compare(int_0)
    var_6 = var_4.__str__()
    var_7 = var_5.__eq__(int_0)
    list_2 = [var_1, list_1, list_1]
    var_8 = module_0.tensorproduct(*list_2)
    assert (
        f"{type(var_8).__module__}.{type(var_8).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_8) == 0
    module_0.tensorcontraction(var_6)


@pytest.mark.xfail(strict=True)
def test_case_29():
    tuple_0 = ()
    flatten_0 = module_0.Flatten(tuple_0)
    assert (
        f"{type(flatten_0).__module__}.{type(flatten_0).__qualname__}"
        == "arrayop.Flatten"
    )
    flatten_1 = module_0.Flatten(flatten_0)
    assert (
        f"{type(flatten_1).__module__}.{type(flatten_1).__qualname__}"
        == "arrayop.Flatten"
    )
    bytes_0 = b"Xa\xe8UasW\xfd\xdb\xcc"
    list_0 = [tuple_0, tuple_0]
    var_0 = module_0.tensorproduct(*list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_0) == 0
    var_1 = flatten_1.__iter__()
    var_2 = module_0.tensorproduct(*bytes_0)
    assert var_2 == 1846481444360341113600
    tuple_1 = (var_0, tuple_0, tuple_0)
    var_3 = module_0.derive_by_array(tuple_0, tuple_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_3) == 0
    var_4 = module_0.tensordiagonal(var_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_4) == 0
    flatten_2 = module_0.Flatten(tuple_1)
    int_0 = -396
    var_5 = module_0.permutedims(int_0, var_0)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_5) == 1
    bool_0 = True
    var_6 = module_0.derive_by_array(bool_0, tuple_0)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_6) == 0
    var_7 = flatten_2.next()
    assert (
        f"{type(var_7).__module__}.{type(var_7).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_7) == 0
    var_8 = module_0.tensorcontraction(var_5)
    assert (
        f"{type(var_8).__module__}.{type(var_8).__qualname__}"
        == "sympy.core.numbers.Integer"
    )
    var_9 = var_6.compare(int_0)
    var_10 = var_6.__str__()
    assert var_10 == "[]"
    var_11 = var_9.__eq__(var_8)
    list_1 = [var_5, var_5, var_5]
    var_12 = module_0.tensorproduct(*list_1)
    assert (
        f"{type(var_12).__module__}.{type(var_12).__qualname__}"
        == "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray"
    )
    assert len(var_12) == 1
    var_13 = var_5.__getitem__(var_7)
    module_0.tensorcontraction(var_13, *var_3)
