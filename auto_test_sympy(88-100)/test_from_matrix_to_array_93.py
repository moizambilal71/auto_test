# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import from_matrix_to_array as module_0
import sympy.matrices.expressions.transpose as module_1
import sympy.matrices.expressions.matexpr as module_2
import sympy.core.expr as module_3


def test_case_0():
    none_type_0 = None
    basic_0 = module_0.convert_matrix_to_array(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    transpose_0 = module_1.Transpose()
    module_0.convert_matrix_to_array(transpose_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    matrix_expr_0 = module_2.MatrixExpr()
    var_0 = matrix_expr_0.__neg__()
    module_0.convert_matrix_to_array(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    basic_0 = module_0.convert_matrix_to_array(none_type_0)
    expr_0 = module_3.Expr()
    basic_1 = module_0.convert_matrix_to_array(expr_0)
    basic_2 = module_0.convert_matrix_to_array(expr_0)
    basic_3 = module_0.convert_matrix_to_array(expr_0)
    matrix_expr_0 = module_2.MatrixExpr()
    basic_4 = module_0.convert_matrix_to_array(basic_3)
    none_type_1 = None
    var_0 = basic_1.__neg__()
    var_1 = expr_0.has()
    var_2 = basic_3.rcall()
    basic_5 = module_0.convert_matrix_to_array(var_0)
    basic_6 = module_0.convert_matrix_to_array(basic_3)
    basic_7 = module_0.convert_matrix_to_array(var_2)
    var_3 = expr_0.__mod__(none_type_1)
    var_2.is_hypergeometric(var_3)


@pytest.mark.xfail(strict=True)
def test_case_4():
    expr_0 = module_3.Expr()
    basic_0 = module_0.convert_matrix_to_array(expr_0)
    assert (
        f"{type(basic_0).__module__}.{type(basic_0).__qualname__}"
        == "sympy.core.expr.Expr"
    )
    basic_1 = module_0.convert_matrix_to_array(expr_0)
    assert (
        f"{type(basic_1).__module__}.{type(basic_1).__qualname__}"
        == "sympy.core.expr.Expr"
    )
    basic_2 = module_0.convert_matrix_to_array(basic_1)
    assert (
        f"{type(basic_2).__module__}.{type(basic_2).__qualname__}"
        == "sympy.core.expr.Expr"
    )
    var_0 = expr_0.__rpow__(basic_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "sympy.core.power.Pow"
    )
    basic_3 = module_0.convert_matrix_to_array(var_0)
    assert (
        f"{type(basic_3).__module__}.{type(basic_3).__qualname__}"
        == "sympy.core.power.Pow"
    )
    basic_4 = module_0.convert_matrix_to_array(basic_3)
    var_1 = basic_3.__neg__()
    var_2 = basic_3.has()
    var_3 = expr_0.rcall()
    basic_5 = module_0.convert_matrix_to_array(var_1)
    basic_6 = module_0.convert_matrix_to_array(basic_4)
    basic_7 = module_0.convert_matrix_to_array(var_3)
    basic_5.is_hypergeometric(var_2)


@pytest.mark.xfail(strict=True)
def test_case_5():
    expr_0 = module_3.Expr()
    basic_0 = module_0.convert_matrix_to_array(expr_0)
    assert (
        f"{type(basic_0).__module__}.{type(basic_0).__qualname__}"
        == "sympy.core.expr.Expr"
    )
    var_0 = expr_0.expand(mul=expr_0)
    matrix_expr_0 = expr_0.__rmul__(basic_0)
    assert (
        f"{type(matrix_expr_0).__module__}.{type(matrix_expr_0).__qualname__}"
        == "sympy.core.power.Pow"
    )
    basic_1 = module_0.convert_matrix_to_array(matrix_expr_0)
    assert (
        f"{type(basic_1).__module__}.{type(basic_1).__qualname__}"
        == "sympy.tensor.array.expressions.array_expressions.ArrayTensorProduct"
    )
    basic_2 = module_0.convert_matrix_to_array(basic_1)
    assert (
        f"{type(basic_2).__module__}.{type(basic_2).__qualname__}"
        == "sympy.tensor.array.expressions.array_expressions.ArrayTensorProduct"
    )
    none_type_0 = None
    basic_3 = module_0.convert_matrix_to_array(none_type_0)
    basic_1.__neg__()
