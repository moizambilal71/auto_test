# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src.flask.testing as module_0
import urllib.parse as module_1
import email._header_value_parser as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.FlaskClient()


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.EnvironBuilder(none_type_0)


def test_case_2():
    none_type_0 = None
    flask_cli_runner_0 = module_0.FlaskCliRunner(none_type_0)
    assert flask_cli_runner_0.app is None
    assert flask_cli_runner_0.charset == "utf-8"
    assert flask_cli_runner_0.env == {}
    assert flask_cli_runner_0.echo_stdin is False
    assert flask_cli_runner_0.mix_stderr is True
    list_0 = [none_type_0]
    flask_client_0 = module_0.FlaskClient(*list_0)
    assert (
        f"{type(flask_client_0).__module__}.{type(flask_client_0).__qualname__}"
        == "src.flask.testing.FlaskClient"
    )
    assert flask_client_0.application is None
    assert flask_client_0.allow_subdomain_redirects is False
    assert flask_client_0.preserve_context is False
    assert flask_client_0.environ_base == {
        "REMOTE_ADDR": "127.0.0.1",
        "HTTP_USER_AGENT": "Werkzeug/3.1.3",
    }
    flask_client_1 = flask_client_0.__enter__()
    assert flask_client_0.preserve_context is True
    assert (
        f"{type(flask_client_1).__module__}.{type(flask_client_1).__qualname__}"
        == "src.flask.testing.FlaskClient"
    )
    assert flask_client_1.application is None
    assert flask_client_1.allow_subdomain_redirects is False
    assert flask_client_1.preserve_context is True
    assert flask_client_1.environ_base == {
        "REMOTE_ADDR": "127.0.0.1",
        "HTTP_USER_AGENT": "Werkzeug/3.1.3",
    }
    str_0 = "3'I:CZ\"h:k|>V)^?2w8"
    with pytest.raises(TypeError):
        module_1.quote_from_bytes(str_0)


def test_case_3():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    flask_client_0 = module_0.FlaskClient(*list_0)
    assert (
        f"{type(flask_client_0).__module__}.{type(flask_client_0).__qualname__}"
        == "src.flask.testing.FlaskClient"
    )
    assert flask_client_0.application is None
    assert flask_client_0.allow_subdomain_redirects is False
    assert flask_client_0.preserve_context is False
    assert flask_client_0.environ_base == {
        "REMOTE_ADDR": "127.0.0.1",
        "HTTP_USER_AGENT": "Werkzeug/3.1.3",
    }
    str_0 = "3'I:CZ\"h:k|>V)^?2w8"
    with pytest.raises(TypeError):
        module_1.quote_from_bytes(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    flask_cli_runner_0 = module_0.FlaskCliRunner(none_type_0)
    assert flask_cli_runner_0.app is None
    assert flask_cli_runner_0.charset == "utf-8"
    assert flask_cli_runner_0.env == {}
    assert flask_cli_runner_0.echo_stdin is False
    assert flask_cli_runner_0.mix_stderr is True
    list_0 = [none_type_0]
    flask_client_0 = module_0.FlaskClient(*list_0)
    assert (
        f"{type(flask_client_0).__module__}.{type(flask_client_0).__qualname__}"
        == "src.flask.testing.FlaskClient"
    )
    assert flask_client_0.application is None
    assert flask_client_0.allow_subdomain_redirects is False
    assert flask_client_0.preserve_context is False
    assert flask_client_0.environ_base == {
        "REMOTE_ADDR": "127.0.0.1",
        "HTTP_USER_AGENT": "Werkzeug/3.1.3",
    }
    mapping_0 = flask_cli_runner_0.make_env()
    none_type_1 = flask_client_0.__exit__(none_type_0, none_type_0, none_type_0)
    list_1 = [mapping_0]
    flask_client_0.open(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "xb@8ebz\nH<ihP"
    environ_builder_0 = module_0.EnvironBuilder(str_0, base_url=str_0)
    assert (
        f"{type(environ_builder_0).__module__}.{type(environ_builder_0).__qualname__}"
        == "src.flask.testing.EnvironBuilder"
    )
    assert environ_builder_0.app == "xb@8ebz\nH<ihP"
    assert environ_builder_0.path == "/"
    assert environ_builder_0.request_uri == "/"
    assert environ_builder_0.script_root == "xb@8ebzH%3CihP"
    assert environ_builder_0.host == ""
    assert environ_builder_0.url_scheme == ""
    assert environ_builder_0.method == "GET"
    assert (
        f"{type(environ_builder_0.headers).__module__}.{type(environ_builder_0.headers).__qualname__}"
        == "werkzeug.datastructures.headers.Headers"
    )
    assert len(environ_builder_0.headers) == 0
    assert (
        f"{type(environ_builder_0.errors_stream).__module__}.{type(environ_builder_0.errors_stream).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert environ_builder_0.multithread is False
    assert environ_builder_0.multiprocess is False
    assert environ_builder_0.run_once is False
    assert environ_builder_0.environ_base is None
    assert environ_builder_0.environ_overrides is None
    assert environ_builder_0.closed is False
    module_0.EnvironBuilder(str_0, subdomain=str_0)


def test_case_6():
    str_0 = "4?P\\yT}v04yQ%\x0b4&Pjj"
    none_type_0 = None
    list_0 = module_2.get_cfws(str_0)
    with pytest.raises(AssertionError):
        module_0.EnvironBuilder(none_type_0, *list_0, subdomain=str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    flask_cli_runner_0 = module_0.FlaskCliRunner(none_type_0)
    assert flask_cli_runner_0.app is None
    assert flask_cli_runner_0.charset == "utf-8"
    assert flask_cli_runner_0.env == {}
    assert flask_cli_runner_0.echo_stdin is False
    assert flask_cli_runner_0.mix_stderr is True
    none_type_1 = None
    str_0 = "|D(-cm${d"
    dict_0 = {str_0: none_type_1}
    flask_cli_runner_0.invoke(args=none_type_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    list_0 = [none_type_0]
    flask_client_0 = module_0.FlaskClient(*list_0)
    assert (
        f"{type(flask_client_0).__module__}.{type(flask_client_0).__qualname__}"
        == "src.flask.testing.FlaskClient"
    )
    assert flask_client_0.application is None
    assert flask_client_0.allow_subdomain_redirects is False
    assert flask_client_0.preserve_context is False
    assert flask_client_0.environ_base == {
        "REMOTE_ADDR": "127.0.0.1",
        "HTTP_USER_AGENT": "Werkzeug/3.1.3",
    }
    str_0 = "b@ebz\n)H<iahP"
    dict_0 = {str_0: str_0, str_0: none_type_0, str_0: none_type_0, str_0: str_0}
    flask_client_0.open(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "_*zmAOzowMWK"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    flask_cli_runner_0 = module_0.FlaskCliRunner(none_type_0)
    assert flask_cli_runner_0.app is None
    assert flask_cli_runner_0.charset == "utf-8"
    assert flask_cli_runner_0.env == {}
    assert flask_cli_runner_0.echo_stdin is False
    assert flask_cli_runner_0.mix_stderr is True
    module_0.EnvironBuilder(none_type_0, none_type_0, url_scheme=str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    flask_cli_runner_0 = module_0.FlaskCliRunner(none_type_0)
    assert flask_cli_runner_0.app is None
    assert flask_cli_runner_0.charset == "utf-8"
    assert flask_cli_runner_0.env == {}
    assert flask_cli_runner_0.echo_stdin is False
    assert flask_cli_runner_0.mix_stderr is True
    list_0 = [none_type_0]
    flask_client_0 = module_0.FlaskClient(*list_0)
    assert (
        f"{type(flask_client_0).__module__}.{type(flask_client_0).__qualname__}"
        == "src.flask.testing.FlaskClient"
    )
    assert flask_client_0.application is None
    assert flask_client_0.allow_subdomain_redirects is False
    assert flask_client_0.preserve_context is False
    assert flask_client_0.environ_base == {
        "REMOTE_ADDR": "127.0.0.1",
        "HTTP_USER_AGENT": "Werkzeug/3.1.3",
    }
    flask_cli_runner_0.invoke(
        flask_cli_runner_0,
        env=none_type_0,
        catch_exceptions=flask_client_0,
        color=list_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    list_0 = [none_type_0]
    flask_client_0 = module_0.FlaskClient(*list_0)
    assert (
        f"{type(flask_client_0).__module__}.{type(flask_client_0).__qualname__}"
        == "src.flask.testing.FlaskClient"
    )
    assert flask_client_0.application is None
    assert flask_client_0.allow_subdomain_redirects is False
    assert flask_client_0.preserve_context is False
    assert flask_client_0.environ_base == {
        "REMOTE_ADDR": "127.0.0.1",
        "HTTP_USER_AGENT": "Werkzeug/3.1.3",
    }
    str_0 = "b@ebz\n)H<iahP"
    dict_0 = {str_0: str_0, str_0: none_type_0, str_0: none_type_0, str_0: str_0}
    flask_client_1 = flask_client_0.__enter__()
    assert flask_client_0.preserve_context is True
    assert (
        f"{type(flask_client_1).__module__}.{type(flask_client_1).__qualname__}"
        == "src.flask.testing.FlaskClient"
    )
    assert flask_client_1.application is None
    assert flask_client_1.allow_subdomain_redirects is False
    assert flask_client_1.preserve_context is True
    assert flask_client_1.environ_base == {
        "REMOTE_ADDR": "127.0.0.1",
        "HTTP_USER_AGENT": "Werkzeug/3.1.3",
    }
    flask_client_0.open(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    flask_cli_runner_0 = module_0.FlaskCliRunner(none_type_0)
    assert flask_cli_runner_0.app is None
    assert flask_cli_runner_0.charset == "utf-8"
    assert flask_cli_runner_0.env == {}
    assert flask_cli_runner_0.echo_stdin is False
    assert flask_cli_runner_0.mix_stderr is True
    none_type_1 = None
    list_0 = [none_type_1]
    flask_client_0 = module_0.FlaskClient(*list_0)
    assert (
        f"{type(flask_client_0).__module__}.{type(flask_client_0).__qualname__}"
        == "src.flask.testing.FlaskClient"
    )
    assert flask_client_0.application is None
    assert flask_client_0.allow_subdomain_redirects is False
    assert flask_client_0.preserve_context is False
    assert flask_client_0.environ_base == {
        "REMOTE_ADDR": "127.0.0.1",
        "HTTP_USER_AGENT": "Werkzeug/3.1.3",
    }
    flask_client_0.open(buffered=flask_cli_runner_0)


def test_case_13():
    none_type_0 = None
    flask_cli_runner_0 = module_0.FlaskCliRunner(none_type_0)
    assert flask_cli_runner_0.app is None
    assert flask_cli_runner_0.charset == "utf-8"
    assert flask_cli_runner_0.env == {}
    assert flask_cli_runner_0.echo_stdin is False
    assert flask_cli_runner_0.mix_stderr is True
    none_type_1 = None
    list_0 = [none_type_1]
    flask_client_0 = module_0.FlaskClient(*list_0)
    assert (
        f"{type(flask_client_0).__module__}.{type(flask_client_0).__qualname__}"
        == "src.flask.testing.FlaskClient"
    )
    assert flask_client_0.application is None
    assert flask_client_0.allow_subdomain_redirects is False
    assert flask_client_0.preserve_context is False
    assert flask_client_0.environ_base == {
        "REMOTE_ADDR": "127.0.0.1",
        "HTTP_USER_AGENT": "Werkzeug/3.1.3",
    }
    flask_client_1 = flask_client_0.__enter__()
    assert flask_client_0.preserve_context is True
    assert (
        f"{type(flask_client_1).__module__}.{type(flask_client_1).__qualname__}"
        == "src.flask.testing.FlaskClient"
    )
    assert flask_client_1.application is None
    assert flask_client_1.allow_subdomain_redirects is False
    assert flask_client_1.preserve_context is True
    assert flask_client_1.environ_base == {
        "REMOTE_ADDR": "127.0.0.1",
        "HTTP_USER_AGENT": "Werkzeug/3.1.3",
    }
    with pytest.raises(RuntimeError):
        flask_client_0.__enter__()


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    flask_cli_runner_0 = module_0.FlaskCliRunner(none_type_0)
    assert flask_cli_runner_0.app is None
    assert flask_cli_runner_0.charset == "utf-8"
    assert flask_cli_runner_0.env == {}
    assert flask_cli_runner_0.echo_stdin is False
    assert flask_cli_runner_0.mix_stderr is True
    str_0 = "b@ebz\n)H<iahP"
    mapping_0 = flask_cli_runner_0.make_env()
    dict_0 = {str_0: str_0, str_0: none_type_0, str_0: none_type_0, str_0: str_0}
    environ_builder_0 = module_0.EnvironBuilder(dict_0, base_url=str_0)
    assert (
        f"{type(environ_builder_0).__module__}.{type(environ_builder_0).__qualname__}"
        == "src.flask.testing.EnvironBuilder"
    )
    assert environ_builder_0.app == {"b@ebz\n)H<iahP": "b@ebz\n)H<iahP"}
    assert environ_builder_0.path == "/"
    assert environ_builder_0.request_uri == "/"
    assert environ_builder_0.script_root == "b@ebz)H%3CiahP"
    assert environ_builder_0.host == ""
    assert environ_builder_0.url_scheme == ""
    assert environ_builder_0.method == "GET"
    assert (
        f"{type(environ_builder_0.headers).__module__}.{type(environ_builder_0.headers).__qualname__}"
        == "werkzeug.datastructures.headers.Headers"
    )
    assert len(environ_builder_0.headers) == 0
    assert (
        f"{type(environ_builder_0.errors_stream).__module__}.{type(environ_builder_0.errors_stream).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert environ_builder_0.multithread is False
    assert environ_builder_0.multiprocess is False
    assert environ_builder_0.run_once is False
    assert environ_builder_0.environ_base is None
    assert environ_builder_0.environ_overrides is None
    assert environ_builder_0.closed is False
    environ_builder_0.json_dumps(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    flask_cli_runner_0 = module_0.FlaskCliRunner(none_type_0)
    assert flask_cli_runner_0.app is None
    assert flask_cli_runner_0.charset == "utf-8"
    assert flask_cli_runner_0.env == {}
    assert flask_cli_runner_0.echo_stdin is False
    assert flask_cli_runner_0.mix_stderr is True
    list_0 = [none_type_0]
    flask_client_0 = module_0.FlaskClient(*list_0)
    assert (
        f"{type(flask_client_0).__module__}.{type(flask_client_0).__qualname__}"
        == "src.flask.testing.FlaskClient"
    )
    assert flask_client_0.application is None
    assert flask_client_0.allow_subdomain_redirects is False
    assert flask_client_0.preserve_context is False
    assert flask_client_0.environ_base == {
        "REMOTE_ADDR": "127.0.0.1",
        "HTTP_USER_AGENT": "Werkzeug/3.1.3",
    }
    mapping_0 = flask_cli_runner_0.make_env()
    list_1 = [mapping_0]
    flask_client_0.open(*list_1)
