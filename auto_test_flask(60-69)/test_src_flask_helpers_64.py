# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src.flask.helpers as module_0
import urllib.request as module_1
import inspect as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.make_response()


def test_case_1():
    bool_0 = module_0.get_debug_flag()
    assert bool_0 is False


def test_case_2():
    bool_0 = module_0.get_load_dotenv()
    assert bool_0 is True


def test_case_3():
    bool_0 = module_0.get_debug_flag()
    assert bool_0 is False
    var_0 = module_0.stream_with_context(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ">gOeE"
    module_0.stream_with_context(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "*uE!w,`60$TL:ZG.}6-'"
    none_type_0 = None
    response_0 = module_0.redirect(none_type_0)
    assert (
        f"{type(response_0).__module__}.{type(response_0).__qualname__}"
        == "werkzeug.wrappers.response.Response"
    )
    assert (
        f"{type(response_0.headers).__module__}.{type(response_0.headers).__qualname__}"
        == "werkzeug.datastructures.headers.Headers"
    )
    assert len(response_0.headers) == 3
    assert response_0.direct_passthrough is False
    assert response_0.response == [
        b'<!doctype html>\n<html lang=en>\n<title>Redirecting...</title>\n<h1>Redirecting...</h1>\n<p>You should be redirected automatically to the target URL: <a href="None">None</a>. If not, click the link.\n'
    ]
    str_1 = module_0.get_root_path(str_0)
    assert str_1 == "/content"
    response_1 = module_0.redirect(none_type_0, str_0, none_type_0)
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.make_response(*list_0)


def test_case_6():
    var_0 = module_1.urlcleanup()
    response_0 = module_0.redirect(var_0, Response=var_0)
    assert (
        f"{type(response_0).__module__}.{type(response_0).__qualname__}"
        == "werkzeug.wrappers.response.Response"
    )
    assert (
        f"{type(response_0.headers).__module__}.{type(response_0.headers).__qualname__}"
        == "werkzeug.datastructures.headers.Headers"
    )
    assert len(response_0.headers) == 3
    assert response_0.direct_passthrough is False
    assert response_0.response == [
        b'<!doctype html>\n<html lang=en>\n<title>Redirecting...</title>\n<h1>Redirecting...</h1>\n<p>You should be redirected automatically to the target URL: <a href="None">None</a>. If not, click the link.\n'
    ]


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    module_0.abort(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = module_0.get_debug_flag()
    assert bool_0 is False
    module_0.send_from_directory(bool_0, bool_0)


def test_case_9():
    str_0 = ""
    str_1 = module_0.get_root_path(str_0)
    assert str_1 == "/content"


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "D3a~.87Lu"
    module_0.get_template_attribute(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = module_0.get_debug_flag()
    assert bool_0 is False
    var_0 = module_0.stream_with_context(bool_0)
    module_0.flash(var_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    module_0.send_file(
        none_type_0, none_type_0, last_modified=none_type_0, max_age=none_type_0
    )


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.make_response(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    module_0.get_root_path(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = False
    response_0 = module_0.redirect(bool_0)
    assert (
        f"{type(response_0).__module__}.{type(response_0).__qualname__}"
        == "werkzeug.wrappers.response.Response"
    )
    assert (
        f"{type(response_0.headers).__module__}.{type(response_0.headers).__qualname__}"
        == "werkzeug.datastructures.headers.Headers"
    )
    assert len(response_0.headers) == 3
    assert response_0.direct_passthrough is False
    assert response_0.response == [
        b'<!doctype html>\n<html lang=en>\n<title>Redirecting...</title>\n<h1>Redirecting...</h1>\n<p>You should be redirected automatically to the target URL: <a href="False">False</a>. If not, click the link.\n'
    ]
    str_0 = "i@"
    str_1 = module_0.get_root_path(str_0)
    assert str_1 == "/content"
    bool_1 = module_0.get_debug_flag()
    assert bool_1 is False
    bool_2 = module_0.get_load_dotenv()
    assert bool_2 is True
    bool_3 = module_0.get_load_dotenv(str_1)
    h_t_t_p_password_mgr_with_default_realm_0 = (
        module_1.HTTPPasswordMgrWithDefaultRealm()
    )
    list_0 = [str_0, str_0, h_t_t_p_password_mgr_with_default_realm_0]
    bool_4 = module_0.get_load_dotenv(h_t_t_p_password_mgr_with_default_realm_0)
    none_type_0 = None
    module_0.url_for(
        none_type_0, _anchor=none_type_0, _method=none_type_0, _external=list_0
    )


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = module_0.get_load_dotenv()
    assert bool_0 is True
    str_0 = "`i"
    var_0 = module_2.isfunction(str_0)
    var_1 = module_0.stream_with_context(var_0)
    str_1 = module_0.get_root_path(str_0)
    assert str_1 == "/content"
    bool_1 = module_0.get_debug_flag()
    assert bool_1 is False
    str_2 = ""
    module_0.redirect(str_2, Response=var_1)
