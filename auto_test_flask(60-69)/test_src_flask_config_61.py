# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import re as module_0
import src.flask.config as module_1


def test_case_0():
    var_0 = module_0.purge()
    str_0 = var_0.__repr__()


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'yd"0[}e='
    config_attribute_0 = module_1.ConfigAttribute(str_0)
    assert (
        f"{type(config_attribute_0).__module__}.{type(config_attribute_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert config_attribute_0.get_converter is None
    config_attribute_0.__get__(str_0)


def test_case_2():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    config_0.from_object(str_0)


def test_case_4():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    bool_0 = config_0.from_file(str_0, str_0, str_0)
    assert bool_0 is False
    bool_1 = config_0.from_mapping()
    assert bool_1 is True


def test_case_5():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    dict_0 = config_0.get_namespace(str_0)


def test_case_6():
    str_0 = 'yd"0[}e='
    config_attribute_0 = module_1.ConfigAttribute(str_0)
    assert (
        f"{type(config_attribute_0).__module__}.{type(config_attribute_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert config_attribute_0.get_converter is None


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'HR7`g;\\L7"\n_}o=EQ\x0c\\S'
    bool_0 = False
    config_attribute_0 = module_1.ConfigAttribute(str_0)
    assert (
        f"{type(config_attribute_0).__module__}.{type(config_attribute_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert config_attribute_0.get_converter is None
    config_attribute_0.__set__(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    str_1 = config_0.__repr__()
    assert str_1 == "<Config {}>"
    dict_0 = config_0.get_namespace(str_0)
    config_1 = module_1.Config(config_0)
    config_attribute_0 = module_1.ConfigAttribute(config_0)
    assert (
        f"{type(config_attribute_0).__module__}.{type(config_attribute_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert config_attribute_0.get_converter is None
    none_type_0 = config_1.from_object(config_1)
    bool_0 = config_0.from_prefixed_env()
    bool_1 = config_0.from_file(str_0, config_1, str_0)
    assert bool_1 is False
    config_attribute_0.__get__(dict_0, dict_0)


def test_case_9():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    bool_0 = config_0.from_envvar(str_0, str_0)
    assert bool_0 is False


def test_case_10():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    with pytest.raises(RuntimeError):
        config_0.from_envvar(str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "B"
    module_1.Config(str_0, str_0)


def test_case_12():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    dict_0 = config_0.get_namespace(str_0)
    config_attribute_0 = module_1.ConfigAttribute(str_0)
    assert (
        f"{type(config_attribute_0).__module__}.{type(config_attribute_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert config_attribute_0.get_converter is None
    none_type_0 = None
    var_0 = config_attribute_0.__get__(none_type_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert var_0.get_converter is None


def test_case_13():
    str_0 = 'y"0[}e'
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    bool_0 = config_0.from_pyfile(str_0, str_0)
    assert bool_0 is False


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    config_0.from_pyfile(str_0, config_0)


def test_case_15():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    none_type_0 = config_0.from_object(config_0)
    bool_0 = config_0.from_prefixed_env()


def test_case_16():
    str_0 = 'yd"0[G}e='
    dict_0 = {str_0: str_0}
    config_0 = module_1.Config(str_0, dict_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 1
    dict_1 = config_0.get_namespace(str_0, trim_namespace=dict_0)


def test_case_17():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    none_type_0 = config_0.from_object(config_0)


def test_case_18():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    bool_0 = config_0.from_file(str_0, str_0, str_0)
    assert bool_0 is False


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    bool_0 = True
    bool_1 = config_0.from_pyfile(str_0, bool_0)
    assert bool_1 is False
    str_1 = config_0.__repr__()
    assert str_1 == "<Config {}>"
    dict_0 = config_0.get_namespace(str_0)
    config_attribute_0 = module_1.ConfigAttribute(str_0)
    assert (
        f"{type(config_attribute_0).__module__}.{type(config_attribute_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert config_attribute_0.get_converter is None
    config_1 = module_1.Config(config_0)
    config_attribute_1 = module_1.ConfigAttribute(config_0)
    none_type_0 = config_1.from_object(config_1)
    bool_2 = config_0.from_prefixed_env()
    str_2 = "im?v6cd\\SkOif.4cWM"
    bool_3 = False
    bool_4 = config_0.from_file(str_0, config_0, str_2, bool_3)
    assert bool_4 is False
    bool_5 = config_1.from_mapping()
    assert bool_5 is True
    config_attribute_1.__get__(bool_2)


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = "AdcK\x0cH2aq0I8AKpbL7D"
    config_attribute_0 = module_1.ConfigAttribute(str_0)
    assert (
        f"{type(config_attribute_0).__module__}.{type(config_attribute_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert config_attribute_0.get_converter is None
    none_type_0 = None
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    config_0.from_file(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    str_1 = config_0.__repr__()
    assert str_1 == "<Config {}>"
    dict_0 = config_0.get_namespace(str_0)
    config_1 = module_1.Config(config_0)
    bool_0 = config_1.from_mapping(dict_0)
    config_attribute_0 = module_1.ConfigAttribute(config_0)
    assert (
        f"{type(config_attribute_0).__module__}.{type(config_attribute_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert config_attribute_0.get_converter is None
    none_type_0 = config_1.from_object(config_1)
    bool_1 = config_0.from_prefixed_env()
    var_0 = config_attribute_0.__get__(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert var_0.get_converter is None
    bool_2 = True
    bool_3 = config_0.from_envvar(str_0, bool_2)
    assert bool_3 is False
    bool_4 = True
    bool_5 = config_0.from_file(str_1, config_1, bool_4)
    assert bool_5 is False
    bool_6 = config_1.from_mapping()
    assert bool_6 is True
    config_attribute_0.__get__(str_1)


@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = "- gTTU34?(("
    str_1 = "59"
    dict_0 = {str_0: str_0, str_1: str_1}
    config_0 = module_1.Config(str_0, dict_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 2
    dict_1 = config_0.get_namespace(str_1)
    config_1 = module_1.Config(str_1)
    assert (
        f"{type(config_1).__module__}.{type(config_1).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_1) == 0
    config_attribute_0 = module_1.ConfigAttribute(str_0)
    assert (
        f"{type(config_attribute_0).__module__}.{type(config_attribute_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert config_attribute_0.get_converter is None
    config_2 = module_1.Config(config_1)
    config_attribute_1 = module_1.ConfigAttribute(config_1)
    bool_0 = config_1.from_prefixed_env()
    float_0 = -136.0
    bool_1 = config_1.from_file(str_0, float_0, str_0)
    assert bool_1 is False
    config_attribute_0.__get__(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    bool_0 = True
    bool_1 = config_0.from_pyfile(str_0, bool_0)
    assert bool_1 is False
    str_1 = config_0.__repr__()
    assert str_1 == "<Config {}>"
    dict_0 = config_0.get_namespace(str_0)
    config_attribute_0 = module_1.ConfigAttribute(config_0)
    assert (
        f"{type(config_attribute_0).__module__}.{type(config_attribute_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert config_attribute_0.get_converter is None
    bool_2 = config_0.from_prefixed_env()
    none_type_0 = None
    dict_1 = {str_1: none_type_0, str_1: dict_0}
    bool_3 = config_0.from_mapping(**dict_1)
    assert bool_3 is True
    config_attribute_0.__get__(bool_1, bool_2)


def test_case_24():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    config_attribute_0 = module_1.ConfigAttribute(config_0)
    assert (
        f"{type(config_attribute_0).__module__}.{type(config_attribute_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert config_attribute_0.get_converter is None
    str_1 = ""
    bool_0 = config_0.from_prefixed_env(str_1)
    assert bool_0 is True
    assert len(config_0) == 2


def test_case_25():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    bool_0 = True
    bool_1 = config_0.from_pyfile(str_0, bool_0)
    assert bool_1 is False
    dict_0 = config_0.get_namespace(str_0)
    config_1 = module_1.Config(config_0)
    none_type_0 = None
    config_attribute_0 = module_1.ConfigAttribute(none_type_0, str_0)
    assert (
        f"{type(config_attribute_0).__module__}.{type(config_attribute_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert config_attribute_0.get_converter == 'yd"0[}e='
    str_1 = config_0.__repr__()
    assert str_1 == "<Config {}>"
    config_2 = module_1.Config(str_0)
    config_attribute_1 = module_1.ConfigAttribute(config_0)
    none_type_1 = config_1.from_object(config_1)
    var_0 = config_attribute_1.__get__(none_type_1)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert var_0.get_converter is None
    bool_2 = True
    bool_3 = config_0.from_envvar(str_0, bool_2)
    assert bool_3 is False
    str_2 = "1^B~\x0c"
    dict_1 = {
        str_2: none_type_1,
        str_1: config_0,
        str_0: config_attribute_1,
        str_2: bool_0,
    }
    bool_4 = config_0.from_mapping(**dict_1)
    assert bool_4 is True
    assert len(config_0) == 1
    bool_5 = True
    bool_6 = config_0.from_file(str_0, config_1, bool_5)
    assert bool_6 is False
    config_3 = module_1.Config(var_0)
    config_attribute_2 = module_1.ConfigAttribute(bool_0)
    str_3 = ""
    bool_7 = config_2.from_prefixed_env(str_3)
    assert bool_7 is True
    assert len(config_2) == 2
    bool_8 = config_0.from_mapping(none_type_1)
    bool_9 = config_1.from_prefixed_env()


@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    str_1 = ""
    bool_0 = config_0.from_prefixed_env(str_1)
    assert bool_0 is True
    assert len(config_0) == 2
    bool_1 = config_0.from_pyfile(str_0, config_0)
    assert bool_1 is False
    config_1 = module_1.Config(config_0)
    dict_0 = config_0.get_namespace(str_1, trim_namespace=bool_1)
    bool_2 = config_0.from_mapping(**dict_0)
    assert bool_2 is True
    none_type_0 = None
    config_attribute_0 = module_1.ConfigAttribute(none_type_0, str_0)
    assert (
        f"{type(config_attribute_0).__module__}.{type(config_attribute_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert config_attribute_0.get_converter == 'yd"0[}e='
    str_2 = config_0.__repr__()
    assert (
        str_2 == "<Config {'': '/usr/local/bin/pynguin', 'PYVIZ_COMMS_INSTALLED': 1}>"
    )
    config_2 = module_1.Config(str_0)
    config_attribute_1 = module_1.ConfigAttribute(config_0)
    none_type_1 = config_1.from_object(config_1)
    var_0 = config_attribute_1.__get__(none_type_1)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert var_0.get_converter is None
    bool_3 = True
    bool_4 = config_0.from_envvar(str_0, bool_3)
    assert bool_4 is False
    dict_1 = config_0.get_namespace(str_2)
    bool_5 = config_0.from_file(str_0, config_1, bool_3)
    assert bool_5 is False
    dict_2 = config_0.get_namespace(str_1)
    config_3 = module_1.Config(var_0)
    str_3 = "edLyF7YnN"
    config_attribute_2 = module_1.ConfigAttribute(str_3, none_type_0)
    bool_6 = config_2.from_mapping()
    str_4 = ""
    bool_7 = config_2.from_prefixed_env(loads=var_0)
    bool_8 = config_2.from_mapping()
    var_1 = var_0.__get__(none_type_0, var_0)
    bool_9 = config_0.from_prefixed_env(loads=config_attribute_1)
    bool_10 = config_0.from_mapping()
    str_5 = "CTInt\x0boeNs\x0b}kN"
    bool_11 = config_3.from_prefixed_env(str_5)
    config_4 = module_1.Config(str_4)
    none_type_2 = config_1.from_object(var_0)
    var_0.__get__(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = 'yd"0[}e='
    config_0 = module_1.Config(str_0)
    assert (
        f"{type(config_0).__module__}.{type(config_0).__qualname__}"
        == "src.flask.config.Config"
    )
    assert len(config_0) == 0
    bool_0 = True
    none_type_0 = None
    config_1 = module_1.Config(none_type_0)
    str_1 = ""
    bool_1 = config_0.from_prefixed_env(str_1)
    assert bool_1 is True
    assert len(config_0) == 2
    bool_2 = config_0.from_pyfile(str_0, bool_0)
    assert bool_2 is False
    dict_0 = config_0.get_namespace(str_0)
    none_type_1 = None
    config_attribute_0 = module_1.ConfigAttribute(bool_1, str_0)
    assert (
        f"{type(config_attribute_0).__module__}.{type(config_attribute_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert config_attribute_0.get_converter == 'yd"0[}e='
    str_2 = config_0.__repr__()
    assert (
        str_2 == "<Config {'': '/usr/local/bin/pynguin', 'PYVIZ_COMMS_INSTALLED': 1}>"
    )
    config_2 = module_1.Config(str_0)
    config_attribute_1 = module_1.ConfigAttribute(config_0)
    none_type_2 = config_0.from_object(config_0)
    var_0 = config_attribute_1.__get__(none_type_2)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "src.flask.config.ConfigAttribute"
    )
    assert var_0.get_converter is None
    bool_3 = True
    bool_4 = config_0.from_envvar(str_0, bool_3)
    assert bool_4 is False
    none_type_3 = None
    dict_1 = config_0.get_namespace(str_2)
    bool_5 = config_0.from_file(str_0, config_2, bool_0)
    assert bool_5 is False
    dict_2 = config_0.get_namespace(str_1, none_type_3)
    config_3 = module_1.Config(var_0)
    str_3 = "edLyF7YnN"
    config_attribute_2 = module_1.ConfigAttribute(str_3, none_type_1)
    bool_6 = config_2.from_mapping()
    assert bool_6 is True
    bool_7 = config_2.from_mapping()
    config_attribute_1.__get__(config_attribute_1)
